{"version":3,"sources":["rankingsTableRow.tsx","rankingsTable.tsx","Rankings.tsx","PlayerSelector.tsx","RecordForm.tsx","NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TableRow","props","className","player","name","ELO","hasImproved","RankingsTable","players","map","testPlayers","id","Rankings","PlayerSelector","selectedPlayerId","onClick","callback","onChange","event","setNewPlayerName","target","value","onFocus","newPlayerName","RecordForm","useState","undefined","winnerPlayerId","setWinnerPlayerId","winnerNewPlayerName","setWinnerNewPlayerName","loserPlayerId","setLoserPlayerId","loserNewPlayerName","setLoserNewPlayerName","NavBar","to","App","basename","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.866e6a27.chunk.js","sourcesContent":["import React from 'react';\nimport {Player} from './models/Player';\nimport './rankingsTableRow.scss';\n\ntype TableRowProps = {\n    player: Player;\n};\n\nexport let TableRow = (props: TableRowProps) => (\n    <div className=\"table-row\">\n        <div className=\"name\">{props.player.name}:</div>\n        <div className=\"elo\">{props.player.ELO}</div>\n        <div>{props.player.hasImproved ? \"ðŸ“ˆ\" : \"ðŸ“‰\"}</div> \n    </div>\n);","import React from 'react';\nimport \"./rankingsTable.scss\";\nimport { TableRow } from './rankingsTableRow';\nimport {Player} from './models/Player';\n\nexport type RankingsTableProps = {\n    players: Player[];\n}\n\nexport function RankingsTable(props: RankingsTableProps) {\n    return (<div className=\"rankings-table\">\n        {props.players.map(player => \n            <TableRow player={player}/>\n        )}\n        </div>\n    )\n}","import React from 'react';\nimport {RankingsTable} from './rankingsTable';\n\nconst testPlayers = [\n    {\n        name: \"Rupert\",\n        id: 1,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Harry\",\n        id: 2,\n        ELO: 1000,\n        hasImproved: false,\n    },\n    {\n        name: \"Amar\",\n        id: 3,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Marcus\",\n        id: 4,\n        ELO: 1000,\n        hasImproved: false,\n    }\n]\n\nexport const Rankings = () => <RankingsTable players={testPlayers}/>;","import React from 'react';\nimport { Player } from './models/Player';\nimport \"./PlayerSelector.scss\";\n\ntype PlayerSelectorProps = {\n    players: Player[],\n    selectedPlayerId: number | undefined | \"NEW\",\n    callback: (playerId: number | \"NEW\") => void,\n    newPlayerName: string,\n    setNewPlayerName: (name: string) => void,\n}\n\nexport const PlayerSelector = (props: PlayerSelectorProps) => (\n    <div className=\"player-selector\">\n        {props.players.map(player => \n            <div className={\"player-option \" + (player.id === props.selectedPlayerId ? 'selected' : '')} onClick={() => props.callback(player.id)}>\n                {player.name}\n            </div>\n        )}\n        <div className={\"player-option \" + (props.selectedPlayerId === \"NEW\" ? 'selected' : '')}>\n            <input onChange={event => props.setNewPlayerName(event.target.value)} onFocus={() => props.callback(\"NEW\")} value={props.newPlayerName}></input>\n        </div>\n    </div>\n);","import React, { useState } from 'react';\nimport { Player } from './models/Player';\nimport { PlayerSelector } from './PlayerSelector';\nimport \"./RecordForm.scss\";\n\ntype RecordFormProps = {\n    players: Player[]\n};\n\nexport const RecordForm = (props: RecordFormProps) => {\n    const [winnerPlayerId, setWinnerPlayerId] = useState<number | undefined | \"NEW\">(undefined);\n    const [winnerNewPlayerName, setWinnerNewPlayerName] = useState(\"\");\n\n    const [loserPlayerId, setLoserPlayerId] = useState<number | undefined  | \"NEW\">(undefined);\n    const [loserNewPlayerName, setLoserNewPlayerName] = useState(\"\");\n\n    return (\n        <div className=\"record-form\">\n            <div className=\"player-selector-wrapper\">\n                <PlayerSelector players={props.players} callback={(id) => {if (id === \"NEW\" || id !== loserPlayerId) {setWinnerPlayerId(id)}}} selectedPlayerId={winnerPlayerId} setNewPlayerName={setWinnerNewPlayerName} newPlayerName={winnerNewPlayerName}/>\n            </div>\n            <div className=\"divider\">BEAT</div>\n            <div className=\"player-selector-wrapper\">\n                <PlayerSelector players={props.players} callback={(id) => {if (id === \"NEW\" || id !== winnerPlayerId) {setLoserPlayerId(id)}}} selectedPlayerId={loserPlayerId} setNewPlayerName={setLoserNewPlayerName} newPlayerName={loserNewPlayerName}/>\n            </div>\n            <button className=\"divider submit-button\">Record</button>\n        </div>\n    )\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NavBar.scss';\n\n\nexport const NavBar = () => (\n    <nav className=\"nav-bar\">\n        <Link to=\"/\"><button>Rankings</button></Link>\n        <Link to=\"/record\"><button>Record match</button></Link>\n    </nav>\n)","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport {Rankings} from './Rankings';\nimport {RecordForm} from './RecordForm';\nimport { NavBar } from './NavBar';\nimport './App.scss';\n\nconst testPlayers = [\n    {\n        name: \"Rupert\",\n        id: 1,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Harry\",\n        id: 2,\n        ELO: 1000,\n        hasImproved: false,\n    },\n    {\n        name: \"Amar\",\n        id: 3,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Marcus\",\n        id: 4,\n        ELO: 1000,\n        hasImproved: false,\n    },\n    {\n        name: \"Martina\",\n        id: 5,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Reece\",\n        id: 6,\n        ELO: 1000,\n        hasImproved: true,\n    },\n    {\n        name: \"Andrei\",\n        id: 7,\n        ELO: 1000,\n        hasImproved: true,\n    },\n]\n\nfunction App() {\n  return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <NavBar/>\n        </div>\n\n        <Switch>\n          <Route path=\"/record\">\n            <RecordForm players={testPlayers}/>\n          </Route>\n          <Route path=\"/\">\n            <Rankings/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}